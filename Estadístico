# -*- coding: utf-8 -*-
"""
Created on Tue Jun 30 18:31:40 2020

@author: Carlos García Guillén
"""



import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from numba import njit
from time import time

tic=time()

#datos_df=pd.read_excel("Marzo_eur_usd_min.xlsx")
#datos_df=pd.read_excel("EURUSDminuto.xlsx")
#datos_df=pd.read_excel("EURUSDhora.xlsx")
#datos_df=pd.read_excel("EURUSDdia.xlsx")
#datos_df=pd.read_excel("GBPUSDminuto.xlsx")
datos_df=pd.read_excel("USDCHFminuto.xlsx")

datos=np.zeros((datos_df.shape[0],4))

for i in range (datos.shape[0]):
    for j in range (4):
        datos[i][j]=datos_df.iloc[i,j+1]
     
tac=time()  
print("El tiempo de crear la matriz y leer los datos ha sido",tac-tic) 
        
#sns.lineplot(data=datos_df["Open"],label="Open")

roll=np.array([10,25,50,100,150,200,250,300,350,400,450])

#particion=np.array([1,2,5])

particiones = 1

#rango = 1

rangos=np.array([0.25, 0.5, 0.75, 1, 1.25, 1.5, 2, 2.5, 3, 5])


salida_emergencia = 2

comision_trader = 0.4/10000

"""
data_final=np.zeros( ( len(roll), len(particion) ) )
data_acierto=np.zeros( (len(roll), len(particion) ) )
data_operaciones=np.zeros( (len(roll), len(particion) ) )
data_equity_operacion=np.zeros( (len(roll), len(particion) ) )
"""

data_final=np.zeros( ( len(roll), len(rangos) ) )
data_acierto=np.zeros( (len(roll), len(rangos) ) )
data_operaciones=np.zeros( (len(roll), len(rangos) ) )
data_equity_operacion=np.zeros( (len(roll), len(rangos) ) )


@njit
def Segundo_intento (datos, rango, salida_emergencia, comision_trader, rolls, particiones):
    exito_bajista=0
    fracaso_bajista=0
    exito_alcista=0
    fracaso_alcista=0
    operaciones_totales=0

    posicion_i=-2
   

      
    equity=0
    
    
    tamaño=int(rolls/particiones)
    
    
    for i in range (1,len(datos)-2*rolls-1): #Sería el peor caso de todos pero no queremos que dé error
        

        
        maximo_absoluto = 0
        minimo_absoluto = 5 #Cualquier dato debe ser menor de 5
        #maximo_final = 0
        minimo_final = 5

        if particiones > 1:
        
    
            media = np.zeros(particiones)
                
            for j in range (1, particiones+1): # 1, 2, 3, 4, 5
                
                numeros=np.zeros(tamaño)
                
                numeros_contador = -1
            
                for k in range (tamaño*(j-1), tamaño*j): #0-19, 20-39, 40-59, 60-79, 80-99
                    
                    
                    numeros_contador += 1
                    
                    maximo_absoluto = max (maximo_absoluto, datos [i+k, 1])
                    
                    minimo_absoluto = min (minimo_absoluto, datos [i+k, 2])
                    
                    numeros[numeros_contador]=((datos[i+k, 1] + datos[i+k, 2]) / 2) #La media entre el máximo y mínimo de cada vela
                    
    
                    
                media[j-1] = np.mean (numeros)
                        
            
            
            media_ordenada = np.zeros (len(media))
            media_inversa = np.zeros (len(media))
            
                    
            
            for ii in range (len (media_ordenada)):
                media_ordenada[ii] = media[ii]
                
            
            media_ordenada.sort()
            media_inversa = media_ordenada[::-1]
            
            ordenado=True
            inversa=True
            
            
            for m in range (len(media)):
                if media[m] != media_ordenada[m]:
                    ordenado=False
                if media[m] != media_inversa[m]:
                    inversa=False
        
            
        
        elif particiones == 1:
            
            ordenado = False
            inversa = False
            
            for j in range (rolls):
                
                if datos [i+j,1] > maximo_absoluto:
                    maximo_absoluto = datos [i+j, 1]
                    posicion_maximo = j
                
                if datos [i+j,2] < minimo_absoluto:
                    minimo_absoluto =  datos [i+j, 2] 
                    posicion_minimo = j
            
            if posicion_maximo > posicion_minimo:
                ordenado = True
        
            elif posicion_minimo > posicion_maximo:
                inversa = True
        
            
        #if maximo_absoluto == maximo_final and ordenado: 
       
        if ordenado:
            
        #Posible sushi bajista ya que ha subido ordenado, esperamos a la bajada 
        
            sushi_bajista = False    
            j = rolls
            #pico_alcanzado = False
            minimo_alcanzado = False
            maximo_total = maximo_absoluto
                    
            while sushi_bajista == False and j < 2*rolls:
                
                j += 1
                
                
                maximo_total = max (maximo_total, datos[i+j , 1])
                        

                if datos[i+j, 2] < minimo_absoluto and minimo_alcanzado == False:
                    minimo_alcanzado = True
                    #pos_min=j
                    
                    
    
                
                #if pico_alcanzado == True and minimo_alcanzado == True and pos_min > pos_pico:
                if minimo_alcanzado == True:
                    
                    sushi_bajista = True
                    
                    ancho = rango * (maximo_total - datos [i+j, 2])  #Rango entre el máximo y el open del dia siguiente
                    
                    entrada = datos[i+j+1, 0]
                    
                    stop_loss=False
                    take_profit=False
                    contador = 0
                    
                    if (i-1) == posicion_i:
                        posicion_i = i
                    
                    
                    elif ancho > comision_trader:
                        while stop_loss==False and take_profit==False and (i+j+contador+1) < len(datos) and contador < salida_emergencia*rolls:
                            
                            contador += 1
                            
                            if contador >= salida_emergencia*rolls:
    
                                salida_emerg=datos[i+j+contador,3]
                                resultado_emergencia=salida_emerg-entrada-comision_trader
                                
                                if resultado_emergencia > 0 :
                                    exito_bajista += 1

                                    
                                    equity += resultado_emergencia
                                  
                                    operaciones_totales +=1
                                  
                                    posicion_i = i
                                    
                                 
                                    
                                    
                                
                                elif resultado_emergencia < 0 :
                                    fracaso_bajista += 1

                                    
                                    equity += resultado_emergencia
                                    operaciones_totales +=1
                              
                                    posicion_i = i
                                    
                                    
    
    
                                    
                                
                            elif datos[i+j+contador,2] <= (entrada-ancho):
                                stop_loss=True
                                fracaso_bajista += 1

                                
                                equity -= (ancho+comision_trader)
                                operaciones_totales +=1
                              
                                posicion_i = i
                                
    
                                
                            
                                                       
                            elif datos[i+j+contador,1] >= (entrada+ancho):
                                take_profit=True
                                exito_bajista += 1

                                                     
                                equity += (ancho-comision_trader)
                                operaciones_totales +=1
                         
                                posicion_i = i
                                
    
    
                        
                        
      
        
      
        #elif minimo_absoluto == minimo_final and inversa: 
        
        elif inversa:
        
        #Posible sushi alcista ya que ha bajado ordenado, esperamos a la remontada
            
            sushi_alcista = False    
            j = rolls
            #valle_alcanzado = False
            maximo_alcanzado = False
            minimo_total = minimo_final
        
            while sushi_alcista == False and j < 2*rolls:
                
                j += 1
                
                minimo_total = min (minimo_total, datos[i+j, 2])

                    
                if datos[i+j, 1] > maximo_absoluto and maximo_alcanzado == False:
                    maximo_alcanzado = True
                    #pos_maximo = j
    
                
                #if valle_alcanzado == True and maximo_alcanzado == True and pos_maximo > pos_valle:
                if maximo_alcanzado == True:
                    
                
                    sushi_alcista = True
                    
                    ancho = rango * (datos [i+j, 1] - minimo_total)  #Rango entre el mínimo y el cierre donde cumple
                    
                    entrada = datos[i+j+1, 0]
                    
                    stop_loss = False
                    take_profit = False
                    
                    contador = 0
                    
                    if (i-1) == posicion_i:
                        posicion_i = i
                    
                    elif ancho > comision_trader:
                        while stop_loss==False and take_profit==False and (i+j+contador+1) < len(datos) and contador < salida_emergencia*rolls:
                            
                            contador += 1
                            
                            if contador >= salida_emergencia*rolls:
    
                                salida_emerg=datos[i+j+contador,3]
                                resultado_emergencia=-salida_emerg+entrada-comision_trader  
                                
                                if resultado_emergencia > 0 :
                                    
                                    exito_alcista += 1

                                    equity += resultado_emergencia
                                    operaciones_totales +=1
                                
                                    posicion_i = i
                                    
                                    
                                                                      
                                if resultado_emergencia < 0 :
                                    fracaso_alcista += 1

                                
                                    equity += resultado_emergencia
                                    operaciones_totales +=1
                                    posicion_i = i
                                    
    
                              
                                
                            elif datos[i+j+contador, 1] >= (entrada+ancho):
                                stop_loss=True
                                fracaso_alcista=fracaso_alcista+1

                                
                                equity -= (ancho+comision_trader)
                                operaciones_totales += 1
                                posicion_i = i
                                
    
                                
                                
                            elif datos[i+j+contador,2] <= (entrada-ancho):
                                take_profit=True
                                exito_alcista=exito_alcista+1

                                
                                equity += (ancho-comision_trader)
                                operaciones_totales +=1
                                posicion_i = i
                                
    
   
    

       
    exitos_totales=exito_alcista+exito_bajista
    fracasos_totales=fracaso_alcista+fracaso_bajista
    operaciones_efectuadas=exitos_totales+fracasos_totales+1
    ratio_porcentual=100*exitos_totales/operaciones_efectuadas
    equity_operacion = equity*10000/operaciones_totales

    return (ratio_porcentual, equity, operaciones_totales, equity_operacion) 
tic = time()

posicion_x=-1
contador = 0
for rolls in roll:
            posicion_x += 1
        
            posicion_y = -1
        
            for rango in rangos:
                
                contador += 1
                print(contador)
                posicion_y += 1

                ratio_porcentual, equity, operaciones_totales, equity_operacion = Segundo_intento(datos, rango, salida_emergencia, comision_trader, rolls, particiones)
                
                data_acierto[posicion_x][posicion_y]=ratio_porcentual
                data_final[posicion_x][posicion_y]=equity
                data_operaciones[posicion_x][posicion_y]=operaciones_totales
                data_equity_operacion[posicion_x][posicion_y]=equity_operacion


tac = time()



tiempo=tac-tic



plt.figure(figsize=(len(roll),len(rangos)))      
sns.heatmap(data=data_final, annot=True, center=0, cmap="afmhot")
plt.ylabel("Rolls")
plt.xlabel("Rango")

plt.figure(figsize=(len(roll),len(rangos)))      
sns.heatmap(data=data_acierto, annot=True, center=50, cmap="afmhot")
plt.ylabel("Rolls")
plt.xlabel("Rango")

plt.figure(figsize=(len(roll),len(rangos)))      
sns.heatmap(data=data_operaciones, annot=True, cmap="afmhot")
plt.ylabel("Rolls")
plt.xlabel("Rango")

plt.figure(figsize=(len(roll),len(rangos)))      
sns.heatmap(data=data_equity_operacion, annot=True, center=0, cmap="afmhot")
plt.ylabel("Rolls")
plt.xlabel("Rango")


print("El tiempo ha sido",tiempo)    
