"""
Created on Tue Jun 30 17:40:11 2020

@author: Carlos García Guillén
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from numba import njit
from time import time
"""
tic=time()

#datos_df=pd.read_excel("Marzo_eur_usd_min.xlsx")
#datos_df=pd.read_excel("EURUSDminuto.xlsx")
#datos_df=pd.read_excel("EURUSDhora.xlsx")
#datos_df=pd.read_excel("EURUSDdia.xlsx")
datos_df=pd.read_excel("GBPUSDminuto.xlsx")
#datos_df=pd.read_excel("USDCHFminuto.xlsx")

datos=np.zeros((datos_df.shape[0],4))

for i in range (datos.shape[0]):
    for j in range (4):
        datos[i][j]=datos_df.iloc[i,j+1]
     
tac=time()  
print("El tiempo de crear la matriz y leer los datos ha sido",tac-tic) 
        
#sns.lineplot(data=datos_df["Open"],label="Open")

"""
rolls=400
particiones=1
rango = 2

salida_emergencia = 2

comision_trader = 0.4/10000


@njit
def Segundo_intento (datos, rango, salida_emergencia, comision_trader, rolls, particiones):
    exito_bajista=0
    fracaso_bajista=0
    exito_alcista=0
    fracaso_alcista=0
    operaciones_totales=0
    equity_history=[]
    posicion_salida=[]
    posicion_i=[]
    repetidos_i=[]

      
    equity=0
    
    
    tamaño=int(rolls/particiones)
    
    
    for i in range (1,len(datos)-2*rolls-1): #Sería el peor caso de todos pero no queremos que dé error
        

        
        maximo_absoluto = 0
        minimo_absoluto = 5 #Cualquier dato debe ser menor de 5
        #maximo_final = 0
        minimo_final = 5

        
        
    
        media = np.zeros(particiones)
            
        for j in range (1, particiones+1): # 1, 2, 3, 4, 5
            
            numeros=np.zeros(tamaño)
            
            numeros_contador = -1
        
            for k in range (tamaño*(j-1), tamaño*j): #0-19, 20-39, 40-59, 60-79, 80-99
                
                
                numeros_contador += 1
                
                maximo_absoluto = max (maximo_absoluto, datos [i+k, 1])
                
                minimo_absoluto = min (minimo_absoluto, datos [i+k, 2])
                
                numeros[numeros_contador]=((datos[i+k, 1] + datos[i+k, 2]) / 2) #La media entre el máximo y mínimo de cada vela
                

                
            media[j-1] = np.mean (numeros)
                    
        
        
        media_ordenada = np.zeros (len(media))
        media_inversa = np.zeros (len(media))
        
                
        
        for ii in range (len (media_ordenada)):
            media_ordenada[ii] = media[ii]
            
        
        media_ordenada.sort()
        media_inversa = media_ordenada[::-1]
        
        ordenado=True
        inversa=True
        
        
        for m in range (len(media)):
            if media[m] != media_ordenada[m]:
                ordenado=False
            if media[m] != media_inversa[m]:
                inversa=False
        
    
        #if maximo_absoluto == maximo_final and ordenado: 
       
        if ordenado:
            
        #Posible sushi bajista ya que ha subido ordenado, esperamos a la bajada 
        
            sushi_bajista = False    
            j = rolls
            #pico_alcanzado = False
            minimo_alcanzado = False
            maximo_total = maximo_absoluto
                    
            while sushi_bajista == False and j < 2*rolls:
                
                j += 1
                
                
                maximo_total = max (maximo_total, datos[i+j , 1])
                        

                if datos[i+j, 1] < minimo_absoluto and minimo_alcanzado == False:
                    minimo_alcanzado = True
                    #pos_min=j
                    
                    
    
                
                #if pico_alcanzado == True and minimo_alcanzado == True and pos_min > pos_pico:
                if minimo_alcanzado == True:
                    
                    sushi_bajista = True
                    
                    ancho = rango * (maximo_total - datos [i+j+1, 0])  #Rango entre el máximo y el open del dia siguiente
                    
                    entrada = datos[i+j+1, 0]
                    
                    stop_loss=False
                    take_profit=False
                    contador = 0
                    
                    if (i-1) in posicion_i or (i-1) in repetidos_i:
                        repetidos_i.append(i)
                    
                    
                    elif ancho > comision_trader:
                        while stop_loss==False and take_profit==False and (i+j+contador+1) < len(datos) and contador < salida_emergencia*rolls:
                            
                            contador += 1
                            
                            if contador >= salida_emergencia*rolls:
    
                                salida_emerg=datos[i+j+contador,3]
                                resultado_emergencia=salida_emerg-entrada-comision_trader
                                
                                if resultado_emergencia > 0 :
                                    exito_bajista += 1

                                    
                                    equity += resultado_emergencia
                                    equity_history.append(equity)
                                    operaciones_totales +=1
                                    posicion_salida.append(i+j+contador)
                                    posicion_i.append(i)
                                    
                                 
                                    
                                    
                                
                                elif resultado_emergencia < 0 :
                                    fracaso_bajista += 1

                                    
                                    equity += resultado_emergencia
                                    operaciones_totales +=1
                                    equity_history.append(equity)
                                    posicion_salida.append(i+j+contador)
                                    posicion_i.append(i)
                                    
                                    
    
    
                                    
                                
                            elif datos[i+j+contador,2] <= (entrada-ancho):
                                stop_loss=True
                                fracaso_bajista += 1

                                
                                equity -= (ancho+comision_trader)
                                operaciones_totales +=1
                                equity_history.append(equity)
                                posicion_salida.append(i+j+contador)
                                posicion_i.append(i)
                                
    
                                
                            
                                                       
                            elif datos[i+j+contador,1] >= (entrada+ancho):
                                take_profit=True
                                exito_bajista += 1

                                                     
                                equity += (ancho-comision_trader)
                                operaciones_totales +=1
                                equity_history.append(equity)
                                posicion_salida.append(i+j+contador)
                                posicion_i.append(i)
                                
    
    
                        
                        
      
        
      
        #elif minimo_absoluto == minimo_final and inversa: 
        
        elif inversa:
        
        #Posible sushi alcista ya que ha bajado ordenado, esperamos a la remontada
            
            sushi_alcista = False    
            j = rolls
            #valle_alcanzado = False
            maximo_alcanzado = False
            minimo_total = minimo_final
        
            while sushi_alcista == False and j < 2*rolls:
                
                j += 1
                
                minimo_total = min (minimo_total, datos[i+j, 2])

                    
                if datos[i+j, 1] > maximo_absoluto and maximo_alcanzado == False:
                    maximo_alcanzado = True
                    #pos_maximo = j
    
                
                #if valle_alcanzado == True and maximo_alcanzado == True and pos_maximo > pos_valle:
                if maximo_alcanzado == True:
                    
                
                    sushi_alcista = True
                    
                    ancho = rango * (datos [i+j+1, 0] - minimo_total)  #Rango entre el mínimo y el cierre donde cumple
                    
                    entrada = datos[i+j+1, 0]
                    
                    stop_loss = False
                    take_profit = False
                    
                    contador = 0
                    
                    if (i-1) in posicion_i or (i-1) in repetidos_i:
                        repetidos_i.append(i)
                    
                    elif ancho > comision_trader:
                        while stop_loss==False and take_profit==False and (i+j+contador+1) < len(datos) and contador < salida_emergencia*rolls:
                            
                            contador += 1
                            
                            if contador >= salida_emergencia*rolls:
    
                                salida_emerg=datos[i+j+contador,3]
                                resultado_emergencia=-salida_emerg+entrada-comision_trader  
                                
                                if resultado_emergencia > 0 :
                                    
                                    exito_alcista += 1

                                    equity += resultado_emergencia
                                    operaciones_totales +=1
                                    equity_history.append(equity)
                                    posicion_salida.append(i+j+contador)
                                    posicion_i.append(i)
                                    
                                    
                                                                      
                                if resultado_emergencia < 0 :
                                    fracaso_alcista += 1

                                
                                    equity += resultado_emergencia
                                    operaciones_totales +=1
                                    equity_history.append(equity)
                                    posicion_salida.append(i+j+contador)
                                    posicion_i.append(i)
                                    
    
                              
                                
                            elif datos[i+j+contador, 1] >= (entrada+ancho):
                                stop_loss=True
                                fracaso_alcista=fracaso_alcista+1

                                
                                equity -= (ancho+comision_trader)
                                operaciones_totales +=1
                                equity_history.append(equity)
                                posicion_salida.append(i+j+contador)
                                posicion_i.append(i)
                                
    
                                
                                
                            elif datos[i+j+contador,2] <= (entrada-ancho):
                                take_profit=True
                                exito_alcista=exito_alcista+1

                                
                                equity += (ancho-comision_trader)
                                operaciones_totales +=1
                                equity_history.append(equity)
                                posicion_salida.append(i+j+contador)
                                posicion_i.append(i)
                                
    
   
    

       
    exitos_totales=exito_alcista+exito_bajista
    fracasos_totales=fracaso_alcista+fracaso_bajista
    operaciones_efectuadas=exitos_totales+fracasos_totales
    ratio_porcentual=100*exitos_totales/operaciones_efectuadas
    equity_operaciones= 10000*equity/operaciones_totales

    return (ratio_porcentual, equity, operaciones_totales, equity_history, posicion_salida, posicion_i, equity_operaciones) 

tic = time()



ratio_porcentual, equity, operaciones_totales, equity_history, posicion_salida, posicion_i, equity_operaciones = Segundo_intento(datos, rango, salida_emergencia, comision_trader, rolls, particiones)
                



tac = time()



tiempo=tac-tic






#print("El tiempo ha sido",tiempo)   
print("Con ", rolls, "rolls, particionado", particiones, "veces y con un rango de ",rango)
print("Porcentaje de aciertos ha sido = ", ratio_porcentual)
print("Equity ha sido = ", equity) 
print("Operaciones totales = ",operaciones_totales)
print("Los pips por operación han sido de = ", equity_operaciones)



equity_representar=np.zeros(len(equity_history))

for i in range (len(equity_representar)):
    equity_representar[i]=equity_history[i]



sns.lineplot(data=equity_representar,label="Equity")
